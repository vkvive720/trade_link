import 'dart:convert';
import 'package:flutter/material.dart';
import 'package:flutter_riverpod/flutter_riverpod.dart';
import 'package:http/http.dart' as http;
import 'package:shared_preferences/shared_preferences.dart';

import '../global_varibles.dart';
import '../models/vendor.dart';
import '../provider/vendor_provider.dart';
import '../services/manage_http_response.dart';

class VendorAuthController {
  Future<void> signUpVendor({
    required BuildContext context,
    required String email,
    required String fullName,
    required String password,
    required String role,
    // Optionally include these fields if needed
    String state = '',
    String city = '',
    String locality = '',
  }) async {
    try {
      // Create a Vendor object
      Vendor vendor = Vendor(
        id: '', // ID may be generated by the backend
        fullName: fullName,
        email: email,
        state: state,
        city: city,
        locality: locality,
        role: role,
        password: password,
      );

      // Define the signup endpoint for vendors
      var url = '$uri/api/vendor/signup';
      print(url);
      print(vendor.toJson());

      // Send a POST request with the vendor JSON data
      http.Response response = await http.post(
        Uri.parse(url),
        body: vendor.toJson(),
        headers: <String, String>{
          'Content-Type': 'application/json; charset=UTF-8',
        },
      );

      // Handle the HTTP response
      manageHttpResponse(
        response: response,
        context: context,
        onSuccess: () {
          showSnackBar(context, "Vendor account has been created successfully!");
        },
      );
    } catch (e) {
      showSnackBar(context, "Error: $e");
    }
  }

  Future<void> signInVendor({
    required BuildContext context,
    required String email,
    required String password,
    required WidgetRef ref,
  }) async {
    try {
      // Define the signin endpoint for vendors
      http.Response response = await http.post(
        Uri.parse("$uri/api/vendor/signin"),
        body: jsonEncode({
          'email': email,
          'password': password,
        }),
        headers: <String, String>{
          'Content-Type': 'application/json; charset=UTF-8',
        },
      );

      manageHttpResponse(
        response: response,
        context: context,
        onSuccess: () async {
          SharedPreferences preferences = await SharedPreferences.getInstance();
          // Extract token from response
          String token = jsonDecode(response.body)['token'];
          await preferences.setString('vendor_auth_token', token);

          // Encode vendor data received as JSON
          final vendorJson = jsonEncode(jsonDecode(response.body)['vendor']);
          // Update vendor state using Riverpod
          ref.read(vendorProvider.notifier).setVendor(vendorJson);
          // Persist vendor data locally for future use
          await preferences.setString('vendor', vendorJson);

          // Navigate to the vendor main screen (if implemented)
          // Navigator.pushAndRemoveUntil(
          //   context,
          //   MaterialPageRoute(builder: (context) => VendorMainScreen()),
          //   (route) => false,
          // );
        },
      );
    } catch (e) {
      showSnackBar(context, "Error: $e");
      print("Error: $e");
    }
  }

  Future<void> signOutVendor({
    required BuildContext context,
    required WidgetRef ref,
  }) async {
    try {
      SharedPreferences preferences = await SharedPreferences.getInstance();
      // Remove vendor token and data from SharedPreferences
      await preferences.remove('vendor_auth_token');
      await preferences.remove('vendor');
      // Clear vendor state using Riverpod
      ref.read(vendorProvider.notifier).signOut();
      // Navigate to the vendor login screen
      // Navigator.pushAndRemoveUntil(
      //   context,
      //   MaterialPageRoute(builder: (context) => VendorLoginScreen()),
      //       (route) => false,
      // );
    } catch (e) {
      showSnackBar(context, "Error signing out: $e");
    }
  }
}
