import 'dart:convert';
import 'package:flutter/material.dart';
import 'package:flutter_riverpod/flutter_riverpod.dart';
import 'package:http/http.dart' as http;
import 'package:my_app/provider/user_provider.dart';
import 'package:my_app/views/screens/authentication_screens/login_screen.dart';
import 'package:my_app/views/screens/main_screen.dart';
import 'package:shared_preferences/shared_preferences.dart';
// import 'package:mac_store_app/models/user.dart';

import '../global_varibles.dart';
import '../models/user.dart';
import '../services/manage_http_response.dart';

final providerController = ProviderContainer();

class AuthController {

  Future<void> signUpUser({
    required BuildContext context,
    required String email,
    required String fullName,
    required String password,
  }) async {
    try {
      // Creating a User object
      User user = User(
        id: '', // ID might be generated by the backend
        fullName: fullName,
        email: email,
        state: '', // Add actual state
        city: '',  // Add actual city
        locality: '', // Add actual locality
        password: password,
        token: ''
      );

      // Sending a POST request
      var url = '$uri/api/signup';
      print(url);
      print(user.toJson());
      http.Response response = await http.post(
        Uri.parse(url),
        body: user.toJson(), // Convert the User  object to JSON
        headers: <String, String>{
          'Content-Type': 'application/json; charset=UTF-8', // Set JSON headers
        },
      );

      // Handling the HTTP response
      manageHttpResponse(
        response: response,
        context: context,
        onSuccess: () {
          showSnackBar(context, "Account has been created for you!");
        },
      );
    } catch (e) {
      showSnackBar(context, "catch Error: $e");
    }
  }

  Future<void> signInUsers(
  {
    required context,
    required String email,
    required String password

  })
  async
  {
    try{
      http.Response response =await http.post(Uri.parse("$uri/api/signin"),
      body: jsonEncode({
        'email':email,
        'password':password,
      }),
        headers: <String,String>{
        'Content-Type':'application/json;charset=UtF-8',

        }
      );

      manageHttpResponse(response: response, context: context, onSuccess: ()async
      {
        // Acess sharedPreference for token and user data storage
        SharedPreferences preferences = await SharedPreferences.getInstance();
        // extract token
        String token = jsonDecode(response.body)['token'];
        // Store the authenticcation toem
        await preferences.setString('auth_token', token);
        // encode the user data recieved as json
        final userjson = jsonEncode(jsonDecode(response.body)['user']);
        // update yhr application state with th user data using RiverPot
        providerController.read(userProvider.notifier).setUser(userjson);
        // store the data for future use
        await preferences.setString('user', userjson);




        Navigator.pushAndRemoveUntil(context, MaterialPageRoute(
            builder: (context)=>  MainScreen()),
            (route)=>false);
      });
    }catch(e){
      showSnackBar(context, "catch Error: $e");
      print("error:$e");

    }

  }
//
// Signout
  Future<void> signOutUser({required BuildContext context}) async {
    try {
      SharedPreferences preferences = await SharedPreferences.getInstance();
      // Clear the token and user from SharedPreferences
      await preferences.remove('auth_token');
      await preferences.remove('user');
      // Clear user state using Riverpod
      providerController.read(userProvider.notifier).signOut();
      // Navigate to the LoginScreen and remove all previous routes
      Navigator.pushAndRemoveUntil(
        context,
        MaterialPageRoute(builder: (context) => LoginScreen()),
            (route) => false,
      );
    } catch (e) {
      showSnackBar(context, "Error signing out: $e");
    }
  }

}




